name: Publish Android, iOS and Web release

on:
  workflow_dispatch:
    inputs:
      environment:
          description: "Choose environment (ignored if triggered by tag)"
          required: true
          default: "dev"
          type: choice
          options:
            - dev
            - prod

      target:
        description: "Choose which build to run"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - web
          - android
          #- ios

  push:
    tags:
      - 'dev/*'
      - 'prod/*'

jobs:
  setup:
    name: Setup environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      version: ${{ steps.set-env.outputs.version }}
    steps:
      - name: Set environment and version
        id: set-env
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}

            if [[ ! "$TAG_NAME" =~ ^(dev|prod)/[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "Error: Tag '$TAG_NAME' does not follow the pattern dev/X.Y.Z or prod/X.Y.Z"
              exit 1
            fi

            ENVIRONMENT=${TAG_NAME%%/*}
            VERSION=${TAG_NAME#*/}

            echo "Detected tag: $TAG_NAME. Ignoring workflow input environment."
          else
            ENVIRONMENT="${{ github.event.inputs.environment || 'dev' }}"
            VERSION="manual"
            echo "No tag detected, using workflow input environment."
          fi

          echo "environment=$ENVIRONMENT" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_ENV

          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  build-web:
    name: Build Web
    needs: setup
    if: ${{ github.event_name == 'workflow_dispatch' && (github.event.inputs.target == 'web' || github.event.inputs.target == 'all') ||github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.4'
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Build Web
        run: flutter build web --release --dart-define=APP_ENV=${{ needs.setup.outputs.environment }}

      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          firebaseServiceAccount: ${{ needs.setup.outputs.environment == 'dev' && secrets.FIREBASE_SERVICE_ACCOUNT_FLUTTER_INTEGRATION_TEST_FFB8E || secrets.FIREBASE_SERVICE_ACCOUNT_FLUTTER_INTEGRATION_TEST_8FAF5 }}
          channelId: live
          projectId: ${{ needs.setup.outputs.environment == 'dev' && 'flutter-integration-test-ffb8e' || 'flutter-integration-test-8faf5' }}
          disableComment: true

  build-android:
    name: Build Android
    needs: setup
    if: ${{ github.event_name == 'workflow_dispatch' && (github.event.inputs.target == 'android' || github.event.inputs.target == 'all') ||github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.4'
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Extract version from pubspec
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: //')
          VERSION_NAME=${VERSION%%+*}
          VERSION_CODE=${VERSION##*+}
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
          echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV
          echo "RELEASE_NAME=$VERSION_CODE ($VERSION_NAME)" >> $GITHUB_ENV

      - name: Create keystore
        run: |
          echo "${{ needs.setup.outputs.environment == 'dev' && secrets.ANDROID_KEYSTORE_FILE_DEV || secrets.ANDROID_KEYSTORE_FILE_PROD }}" | base64 --decode > android/keystore-${{ needs.setup.outputs.environment }}.jks

      - name: Create key.properties
        run: |
          cat <<EOF > android/${{ needs.setup.outputs.environment }}-key.properties
          storePassword=${{ needs.setup.outputs.environment == 'dev' && secrets.ANDROID_KEY_STORE_PASSWORD_DEV || secrets.ANDROID_KEY_STORE_PASSWORD_PROD }}
          keyPassword=${{ needs.setup.outputs.environment == 'dev' && secrets.ANDROID_KEY_STORE_PASSWORD_DEV || secrets.ANDROID_KEY_STORE_PASSWORD_PROD }}
          keyAlias=${{ needs.setup.outputs.environment }}Key
          storeFile=../keystore-${{ needs.setup.outputs.environment }}.jks
          EOF

      - name: Build Android
        run: flutter build appbundle --flavor ${{ needs.setup.outputs.environment }} --release

      - name: Deploy to Play Store
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ needs.setup.outputs.environment == 'dev' && secrets.GOOGLE_PLAY_JSON_KEY_DEV || secrets.GOOGLE_PLAY_JSON_KEY_PROD }}
          packageName: ${{ needs.setup.outputs.environment == 'dev' && 'com.lucassales.flutter_integration_test.dev' || 'com.lucassales.flutter_integration_test' }}
          releaseFiles: build/app/outputs/bundle/${{ needs.setup.outputs.environment }}Release/app-${{ needs.setup.outputs.environment }}-release.aab
          releaseName: ${{ env.RELEASE_NAME }}
          track: internal
          status: draft
          whatsNewDirectory: distribution/whatsnew

  # build-ios:
  #   name: Build iOS
  #   needs: setup
  #   if: ${{ github.event_name == 'workflow_dispatch' && (github.event.inputs.target == 'ios' || github.event.inputs.target == 'all') ||github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') }}
  #   runs-on: macos-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Setup Flutter
  #       uses: subosito/flutter-action@v2
  #       with:
  #         flutter-version: '3.32.4'
  #         cache: true

  #     - name: Install dependencies
  #       run: flutter pub get

  #     - name: Import code sign
  #       uses: apple-actions/import-codesign-certs@v3
  #       with:
  #         p12-file-base64: ${{ secrets.APPSTORE_CERTIFICATES_FILE_BASE64 }}
  #         p12-password: ${{ secrets.APPSTORE_CERTIFICATES_PASSWORD }}

  #     - name: Download provisioning
  #       uses: apple-actions/download-provisioning-profiles@v4
  #       with:
  #         bundle-id: ${{ needs.setup.outputs.environment == 'dev' && 'com.lucassales.flutterIntegrationTest.dev' || 'com.lucassales.flutterIntegrationTest' }}
  #         issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
  #         api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
  #         api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}

  #     # - name: Install CocoaPods
  #     #   run: pod install --project-directory=ios

  #     - name: Build iOS
  #       run: |
  #         flutter build ipa --flavor ${{ needs.setup.outputs.environment }} --release --export-options-plist=ios/config/${{ needs.setup.outputs.environment }}/ExportOptions.plist
      
  #     - name: Upload dSYMs to Crashlytics
  #       run: |
  #         GOOGLE_SERVICE_PLIST=ios/config/${{ needs.setup.outputs.environment }}/GoogleService-Info.plist
  #         ./ios/Pods/FirebaseCrashlytics/upload-symbols \
  #           -gsp $GOOGLE_SERVICE_PLIST \
  #           -p ios build/ios/ipa/*.dSYM.zip

  #     - name: Upload to TestFlight
  #       uses: apple-actions/upload-testflight-build@v3
  #       with:
  #         app-path: build/ios/ipa/flutter_integration_test.ipa
  #         issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
  #         api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
  #         api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
