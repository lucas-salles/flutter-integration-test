name: Publish Android, iOS and Web release

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Choose environment (ignored if triggered by tag)"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - prod
      target:
        description: "Choose which build to run"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - web
          - android
          #- ios
      versionName:
        description: "App version name (ignored if triggered by tag, e.g. 1.2.0)"
        required: true
        type: string
  push:
    tags:
      - 'dev/*'
      - 'prod/*'
  pull_request:
    branches:
      - main

env:
  FLUTTER_VERSION: "3.32.4"
  RUBY_VERSION: "3.2.2"

jobs:
  setup:
    name: Setup environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      version: ${{ steps.set-env.outputs.version }}
    steps:
      - name: Set environment and version
        id: set-env
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}

            if [[ ! "$TAG_NAME" =~ ^(dev|prod)/[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "Error: Tag '$TAG_NAME' does not follow the pattern dev/X.Y.Z or prod/X.Y.Z"
              exit 1
            fi

            ENVIRONMENT=${TAG_NAME%%/*}
            VERSION=${TAG_NAME#*/}

            echo "Detected tag: $TAG_NAME. Ignoring workflow input environment/versionName."
          else
            ENVIRONMENT="${{ github.event.inputs.environment || 'dev' }}"
            VERSION="${{ github.event.inputs.versionName || '1.0.0' }}"

            if [[ -z "$VERSION" ]]; then
              echo "Error: versionName is required when not using a tag"
              exit 1
            fi

            if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "Error: versionName '$VERSION' must follow the pattern X.Y.Z (e.g. 1.2.3)"
              exit 1
            fi

            echo "No tag detected, using workflow input environment/versionName."
          fi

          echo "Set environment to '$ENVIRONMENT' and version to '$VERSION'"

          echo "environment=$ENVIRONMENT" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_ENV

          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  # build-web:
  #   name: Build Web
  #   needs: setup
  #   if: ${{ github.event_name == 'workflow_dispatch' && (github.event.inputs.target == 'web' || github.event.inputs.target == 'all') || github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Setup Flutter
  #       uses: subosito/flutter-action@v2
  #       with:
  #         flutter-version: ${{ env.FLUTTER_VERSION }}
  #         cache: true

  #     - name: Install dependencies
  #       run: flutter pub get

  #     - name: Build Web
  #       run: flutter build web --release --dart-define=APP_ENV=${{ needs.setup.outputs.environment }}

  #     - name: Deploy to Firebase Hosting
  #       uses: FirebaseExtended/action-hosting-deploy@v0
  #       with:
  #         firebaseServiceAccount: ${{ needs.setup.outputs.environment == 'dev' && secrets.FIREBASE_SERVICE_ACCOUNT_FLUTTER_INTEGRATION_TEST_FFB8E || secrets.FIREBASE_SERVICE_ACCOUNT_FLUTTER_INTEGRATION_TEST_8FAF5 }}
  #         channelId: live
  #         projectId: ${{ needs.setup.outputs.environment == 'dev' && 'flutter-integration-test-ffb8e' || 'flutter-integration-test-8faf5' }}
  #         disableComment: true

  build-android:
    name: Build Android
    needs: setup
    # if: ${{ github.event_name == 'workflow_dispatch' && (github.event.inputs.target == 'android' || github.event.inputs.target == 'all') || github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}

      - name: Install fastlane
        run: gem install fastlane

      - name: Create keystore
        run: |
          echo "${{ needs.setup.outputs.environment == 'dev' && secrets.ANDROID_KEYSTORE_FILE_DEV || secrets.ANDROID_KEYSTORE_FILE_PROD }}" | base64 --decode > android/keystore-${{ needs.setup.outputs.environment }}.jks

      - name: Create key.properties
        run: |
          cat <<EOF > android/${{ needs.setup.outputs.environment }}-key.properties
          storePassword=${{ needs.setup.outputs.environment == 'dev' && secrets.ANDROID_KEY_STORE_PASSWORD_DEV || secrets.ANDROID_KEY_STORE_PASSWORD_PROD }}
          keyPassword=${{ needs.setup.outputs.environment == 'dev' && secrets.ANDROID_KEY_STORE_PASSWORD_DEV || secrets.ANDROID_KEY_STORE_PASSWORD_PROD }}
          keyAlias=${{ needs.setup.outputs.environment }}Key
          storeFile=../keystore-${{ needs.setup.outputs.environment }}.jks
          EOF

      - name: Get latest Play Store version code
        id: android_version
        run: |
          if [[ "${{ needs.setup.outputs.environment }}" == "dev" ]]; then
            RAW_OUTPUT=$(fastlane run google_play_track_version_codes \
              package_name:"com.lucassales.flutter_integration_test.dev" \
              json_key_data:'${{ secrets.GOOGLE_PLAY_JSON_KEY_DEV }}' \
              track:"internal")
          else
            RAW_OUTPUT=$(fastlane run google_play_track_version_codes \
              package_name:"com.lucassales.flutter_integration_test" \
              json_key_data:'${{ secrets.GOOGLE_PLAY_JSON_KEY_PROD }}' \
              track:"internal")
          fi

          echo "Raw output from fastlane: $RAW_OUTPUT"

          LATEST_BUILD=$(echo "$RAW_OUTPUT" | grep -oE '\[[0-9]+\]' | tail -n1 | tr -d '[]')

          NEXT_BUILD=$((LATEST_BUILD + 1))

          echo "LATEST_BUILD=$LATEST_BUILD"
          echo "NEXT_BUILD=$NEXT_BUILD"

          echo "NEXT_BUILD=$NEXT_BUILD" >> "$GITHUB_ENV"

      - name: Build Android
        run: |
          flutter build appbundle \
          --release \
          --build-name ${{ needs.setup.outputs.version }} \
          --build-number ${{ env.NEXT_BUILD }} \
          --flavor ${{ needs.setup.outputs.environment }}

      - name: Deploy to Play Store
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ needs.setup.outputs.environment == 'dev' && secrets.GOOGLE_PLAY_JSON_KEY_DEV || secrets.GOOGLE_PLAY_JSON_KEY_PROD }}
          packageName: ${{ needs.setup.outputs.environment == 'dev' && 'com.lucassales.flutter_integration_test.dev' || 'com.lucassales.flutter_integration_test' }}
          releaseFiles: build/app/outputs/bundle/${{ needs.setup.outputs.environment }}Release/app-${{ needs.setup.outputs.environment }}-release.aab
          releaseName: "(${{ env.NEXT_BUILD }}) ${{ needs.setup.outputs.version }}"
          track: internal
          status: draft
          whatsNewDirectory: distribution/whatsnew

  # build-ios:
  #   name: Build iOS
  #   needs: setup
  #   if: ${{ github.event_name == 'workflow_dispatch' && (github.event.inputs.target == 'ios' || github.event.inputs.target == 'all') || github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') }}
  #   runs-on: macos-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Setup Flutter
  #       uses: subosito/flutter-action@v2
  #       with:
  #         flutter-version: ${{ env.FLUTTER_VERSION }}
  #         cache: true

  #     - name: Install dependencies
  #       run: flutter pub get

  #     - name: Setup Ruby
  #       uses: ruby/setup-ruby@v1
  #       with:
  #         ruby-version: ${{ env.RUBY_VERSION }}

  #     - name: Install fastlane
  #       run: gem install fastlane

  #     - name: Import code sign
  #       uses: apple-actions/import-codesign-certs@v3
  #       with:
  #         p12-file-base64: ${{ secrets.APPSTORE_CERTIFICATES_FILE_BASE64 }}
  #         p12-password: ${{ secrets.APPSTORE_CERTIFICATES_PASSWORD }}

  #     - name: Download provisioning
  #       uses: apple-actions/download-provisioning-profiles@v4
  #       with:
  #         bundle-id: ${{ needs.setup.outputs.environment == 'dev' && 'com.lucassales.flutterIntegrationTest.dev' || 'com.lucassales.flutterIntegrationTest' }}
  #         issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
  #         api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
  #         api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}

  #     - name: Create a valid API Key JSON
  #       run: |
  #         KEY_CONTENT="${{ secrets.APPSTORE_API_PRIVATE_KEY }}"
          
  #         ESCAPED_KEY_CONTENT="${KEY_CONTENT//$'\n'/\\n}"
          
  #         cat <<EOF > auth_key.json
  #         {
  #           "key_id": "${{ secrets.APPSTORE_API_KEY_ID }}",
  #           "issuer_id": "${{ secrets.APPSTORE_ISSUER_ID }}",
  #           "key": "${ESCAPED_KEY_CONTENT}",
  #           "in_house": false
  #         }
  #         EOF

  #     - name: Get latest iOS App Store build number
  #       id: ios_version
  #       run: |
  #         if [[ "${{ needs.setup.outputs.environment }}" == "dev" ]]; then
  #           RAW_OUTPUT=$(fastlane run app_store_build_number \
  #             app_identifier:"com.lucassales.flutterIntegrationTest.dev" \
  #             api_key_path:"auth_key.json" \
  #             live:false)
  #         else
  #           RAW_OUTPUT=$(fastlane run app_store_build_number \
  #             app_identifier:"com.lucassales.flutterIntegrationTest" \
  #             api_key_path:"auth_key.json" \
  #             live:false)
  #         fi

  #         echo "Raw output from fastlane: $RAW_OUTPUT"

  #         LATEST_BUILD=$(echo "$RAW_OUTPUT" | grep "Result:" | sed -E 's/.*Result: ([0-9]+).*/\1/')

  #         NEXT_BUILD=$((LATEST_BUILD + 1))

  #         echo "LATEST_BUILD=$LATEST_BUILD"
  #         echo "NEXT_BUILD=$NEXT_BUILD"

  #         echo "NEXT_BUILD=$NEXT_BUILD" >> $GITHUB_ENV

  #     - name: Build iOS
  #       run: |
  #         flutter build ipa \
  #         --release \
  #         --build-name ${{ needs.setup.outputs.version }} \
  #         --build-number ${{ env.NEXT_BUILD }} \
  #         --flavor ${{ needs.setup.outputs.environment }} \
  #         --export-options-plist=ios/config/${{ needs.setup.outputs.environment }}/ExportOptions.plist

  #     - name: Upload to TestFlight
  #       uses: apple-actions/upload-testflight-build@v3
  #       with:
  #         app-path: build/ios/ipa/flutter_integration_test.ipa
  #         issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
  #         api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
  #         api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
