name: Get version code

on:
  pull_request:
    branches:
      - main

jobs:
  tests:
    name: Get version code from Play Store
    runs-on: ubuntu-latest

    steps:
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2

      - name: Install fastlane
        run: gem install fastlane

      # - name: Get latest Play Store version code
      #   id: android_version
      #   run: |
      #     LATEST_BUILD=$(fastlane run \
      #       google_play_track_version_codes \
      #       package_name:"com.lucassales.flutter_integration_test.dev" \
      #       json_key_data:'${{ secrets.GOOGLE_PLAY_JSON_KEY_DEV }}' \
      #       track:"internal" | tail -n 1)
          
      #     echo "LATEST_BUILD=$LATEST_BUILD"

      - name: Get latest Play Store version code
        id: android_version
        shell: bash
        run: |
          set -euo pipefail

          PACKAGE="com.lucassales.flutter_integration_test.dev"

          # roda fastlane e captura stdout+stderr
          RAW_OUTPUT=$(fastlane run google_play_track_version_codes \
            package_name:"$PACKAGE" \
            json_key_data:'${{ secrets.GOOGLE_PLAY_JSON_KEY_DEV }}' \
            track:"internal" 2>&1 || true)

          # remove ANSI color codes (se houver) para facilitar parsing
          CLEAN_OUTPUT=$(echo "$RAW_OUTPUT" | perl -pe 's/\e\[[\d;]*[a-zA-Z]//g')

          # Extrai todos os padrões [digits] e pega o último (que geralmente é o result)
          # Ex.: "… Result: [13]" -> pega "[13]"
          BRACKETED=$(echo "$CLEAN_OUTPUT" | grep -oE '\[[0-9]+\]' || true)
          LATEST_BUILD=$(echo "$BRACKETED" | tail -n1 | tr -d '[]' || true)

          # Fallback se nada foi encontrado
          if [[ -z "$LATEST_BUILD" ]]; then
            echo "No versionCode found in Play Store output. Defaulting to 0."
            exit 1
          fi

          # garante que é um número
          if ! [[ "$LATEST_BUILD" =~ ^[0-9]+$ ]]; then
            echo "Unable to parse versionCode from fastlane output:"
            echo "$CLEAN_OUTPUT"
            exit 1
          fi

          NEXT_BUILD=$((LATEST_BUILD + 1))

          echo "LATEST_BUILD=$LATEST_BUILD"
          echo "NEXT_BUILD=$NEXT_BUILD"

          echo "LATEST_BUILD=$LATEST_BUILD" >> "$GITHUB_ENV"
          echo "NEXT_BUILD=$NEXT_BUILD" >> "$GITHUB_ENV"